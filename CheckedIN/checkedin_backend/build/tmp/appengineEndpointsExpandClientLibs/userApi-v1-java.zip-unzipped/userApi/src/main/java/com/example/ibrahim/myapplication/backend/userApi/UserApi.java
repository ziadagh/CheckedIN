/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/google/apis-client-generator/
 * (build: 2016-05-04 15:59:39 UTC)
 * on 2016-05-15 at 16:13:00 UTC 
 * Modify at your own risk.
 */

package com.example.ibrahim.myapplication.backend.userApi;

/**
 * Service definition for UserApi (v1).
 *
 * <p>
 * This is an API
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link UserApiRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class UserApi extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 15,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.15 of google-api-client to run version " +
        "1.22.0 of the userApi library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://myApplicationId.appspot.com/_ah/api/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "userApi/v1/";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public UserApi(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  UserApi(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * Create a request for the method "deleteUser".
   *
   * This request holds the parameters needed by the userApi server.  After setting any optional
   * parameters, call the {@link DeleteUser#execute()} method to invoke the remote operation.
   *
   * @param username
   * @return the request
   */
  public DeleteUser deleteUser(java.lang.String username) throws java.io.IOException {
    DeleteUser result = new DeleteUser(username);
    initialize(result);
    return result;
  }

  public class DeleteUser extends UserApiRequest<Void> {

    private static final String REST_PATH = "delete_user";

    /**
     * Create a request for the method "deleteUser".
     *
     * This request holds the parameters needed by the the userApi server.  After setting any optional
     * parameters, call the {@link DeleteUser#execute()} method to invoke the remote operation. <p>
     * {@link
     * DeleteUser#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param username
     * @since 1.13
     */
    protected DeleteUser(java.lang.String username) {
      super(UserApi.this, "POST", REST_PATH, null, Void.class);
      this.username = com.google.api.client.util.Preconditions.checkNotNull(username, "Required parameter username must be specified.");
    }

    @Override
    public DeleteUser setAlt(java.lang.String alt) {
      return (DeleteUser) super.setAlt(alt);
    }

    @Override
    public DeleteUser setFields(java.lang.String fields) {
      return (DeleteUser) super.setFields(fields);
    }

    @Override
    public DeleteUser setKey(java.lang.String key) {
      return (DeleteUser) super.setKey(key);
    }

    @Override
    public DeleteUser setOauthToken(java.lang.String oauthToken) {
      return (DeleteUser) super.setOauthToken(oauthToken);
    }

    @Override
    public DeleteUser setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (DeleteUser) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public DeleteUser setQuotaUser(java.lang.String quotaUser) {
      return (DeleteUser) super.setQuotaUser(quotaUser);
    }

    @Override
    public DeleteUser setUserIp(java.lang.String userIp) {
      return (DeleteUser) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String username;

    /**

     */
    public java.lang.String getUsername() {
      return username;
    }

    public DeleteUser setUsername(java.lang.String username) {
      this.username = username;
      return this;
    }

    @Override
    public DeleteUser set(String parameterName, Object value) {
      return (DeleteUser) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "deleteUserFromLocations".
   *
   * This request holds the parameters needed by the userApi server.  After setting any optional
   * parameters, call the {@link DeleteUserFromLocations#execute()} method to invoke the remote
   * operation.
   *
   * @param content the {@link com.example.ibrahim.myapplication.backend.userApi.model.User}
   * @return the request
   */
  public DeleteUserFromLocations deleteUserFromLocations(com.example.ibrahim.myapplication.backend.userApi.model.User content) throws java.io.IOException {
    DeleteUserFromLocations result = new DeleteUserFromLocations(content);
    initialize(result);
    return result;
  }

  public class DeleteUserFromLocations extends UserApiRequest<Void> {

    private static final String REST_PATH = "delete_user_locations";

    /**
     * Create a request for the method "deleteUserFromLocations".
     *
     * This request holds the parameters needed by the the userApi server.  After setting any optional
     * parameters, call the {@link DeleteUserFromLocations#execute()} method to invoke the remote
     * operation. <p> {@link DeleteUserFromLocations#initialize(com.google.api.client.googleapis.servi
     * ces.AbstractGoogleClientRequest)} must be called to initialize this instance immediately after
     * invoking the constructor. </p>
     *
     * @param content the {@link com.example.ibrahim.myapplication.backend.userApi.model.User}
     * @since 1.13
     */
    protected DeleteUserFromLocations(com.example.ibrahim.myapplication.backend.userApi.model.User content) {
      super(UserApi.this, "POST", REST_PATH, content, Void.class);
    }

    @Override
    public DeleteUserFromLocations setAlt(java.lang.String alt) {
      return (DeleteUserFromLocations) super.setAlt(alt);
    }

    @Override
    public DeleteUserFromLocations setFields(java.lang.String fields) {
      return (DeleteUserFromLocations) super.setFields(fields);
    }

    @Override
    public DeleteUserFromLocations setKey(java.lang.String key) {
      return (DeleteUserFromLocations) super.setKey(key);
    }

    @Override
    public DeleteUserFromLocations setOauthToken(java.lang.String oauthToken) {
      return (DeleteUserFromLocations) super.setOauthToken(oauthToken);
    }

    @Override
    public DeleteUserFromLocations setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (DeleteUserFromLocations) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public DeleteUserFromLocations setQuotaUser(java.lang.String quotaUser) {
      return (DeleteUserFromLocations) super.setQuotaUser(quotaUser);
    }

    @Override
    public DeleteUserFromLocations setUserIp(java.lang.String userIp) {
      return (DeleteUserFromLocations) super.setUserIp(userIp);
    }

    @Override
    public DeleteUserFromLocations set(String parameterName, Object value) {
      return (DeleteUserFromLocations) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "getAllUserImages".
   *
   * This request holds the parameters needed by the userApi server.  After setting any optional
   * parameters, call the {@link GetAllUserImages#execute()} method to invoke the remote operation.
   *
   * @return the request
   */
  public GetAllUserImages getAllUserImages() throws java.io.IOException {
    GetAllUserImages result = new GetAllUserImages();
    initialize(result);
    return result;
  }

  public class GetAllUserImages extends UserApiRequest<com.example.ibrahim.myapplication.backend.userApi.model.UserCollection> {

    private static final String REST_PATH = "get_all_user_images";

    /**
     * Create a request for the method "getAllUserImages".
     *
     * This request holds the parameters needed by the the userApi server.  After setting any optional
     * parameters, call the {@link GetAllUserImages#execute()} method to invoke the remote operation.
     * <p> {@link GetAllUserImages#initialize(com.google.api.client.googleapis.services.AbstractGoogle
     * ClientRequest)} must be called to initialize this instance immediately after invoking the
     * constructor. </p>
     *
     * @since 1.13
     */
    protected GetAllUserImages() {
      super(UserApi.this, "GET", REST_PATH, null, com.example.ibrahim.myapplication.backend.userApi.model.UserCollection.class);
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public GetAllUserImages setAlt(java.lang.String alt) {
      return (GetAllUserImages) super.setAlt(alt);
    }

    @Override
    public GetAllUserImages setFields(java.lang.String fields) {
      return (GetAllUserImages) super.setFields(fields);
    }

    @Override
    public GetAllUserImages setKey(java.lang.String key) {
      return (GetAllUserImages) super.setKey(key);
    }

    @Override
    public GetAllUserImages setOauthToken(java.lang.String oauthToken) {
      return (GetAllUserImages) super.setOauthToken(oauthToken);
    }

    @Override
    public GetAllUserImages setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (GetAllUserImages) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public GetAllUserImages setQuotaUser(java.lang.String quotaUser) {
      return (GetAllUserImages) super.setQuotaUser(quotaUser);
    }

    @Override
    public GetAllUserImages setUserIp(java.lang.String userIp) {
      return (GetAllUserImages) super.setUserIp(userIp);
    }

    @Override
    public GetAllUserImages set(String parameterName, Object value) {
      return (GetAllUserImages) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "getAllUserLocation".
   *
   * This request holds the parameters needed by the userApi server.  After setting any optional
   * parameters, call the {@link GetAllUserLocation#execute()} method to invoke the remote operation.
   *
   * @return the request
   */
  public GetAllUserLocation getAllUserLocation() throws java.io.IOException {
    GetAllUserLocation result = new GetAllUserLocation();
    initialize(result);
    return result;
  }

  public class GetAllUserLocation extends UserApiRequest<com.example.ibrahim.myapplication.backend.userApi.model.UserCollection> {

    private static final String REST_PATH = "get_all_user_location";

    /**
     * Create a request for the method "getAllUserLocation".
     *
     * This request holds the parameters needed by the the userApi server.  After setting any optional
     * parameters, call the {@link GetAllUserLocation#execute()} method to invoke the remote
     * operation. <p> {@link GetAllUserLocation#initialize(com.google.api.client.googleapis.services.A
     * bstractGoogleClientRequest)} must be called to initialize this instance immediately after
     * invoking the constructor. </p>
     *
     * @since 1.13
     */
    protected GetAllUserLocation() {
      super(UserApi.this, "GET", REST_PATH, null, com.example.ibrahim.myapplication.backend.userApi.model.UserCollection.class);
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public GetAllUserLocation setAlt(java.lang.String alt) {
      return (GetAllUserLocation) super.setAlt(alt);
    }

    @Override
    public GetAllUserLocation setFields(java.lang.String fields) {
      return (GetAllUserLocation) super.setFields(fields);
    }

    @Override
    public GetAllUserLocation setKey(java.lang.String key) {
      return (GetAllUserLocation) super.setKey(key);
    }

    @Override
    public GetAllUserLocation setOauthToken(java.lang.String oauthToken) {
      return (GetAllUserLocation) super.setOauthToken(oauthToken);
    }

    @Override
    public GetAllUserLocation setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (GetAllUserLocation) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public GetAllUserLocation setQuotaUser(java.lang.String quotaUser) {
      return (GetAllUserLocation) super.setQuotaUser(quotaUser);
    }

    @Override
    public GetAllUserLocation setUserIp(java.lang.String userIp) {
      return (GetAllUserLocation) super.setUserIp(userIp);
    }

    @Override
    public GetAllUserLocation set(String parameterName, Object value) {
      return (GetAllUserLocation) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "getImage".
   *
   * This request holds the parameters needed by the userApi server.  After setting any optional
   * parameters, call the {@link GetImage#execute()} method to invoke the remote operation.
   *
   * @param username
   * @return the request
   */
  public GetImage getImage(java.lang.String username) throws java.io.IOException {
    GetImage result = new GetImage(username);
    initialize(result);
    return result;
  }

  public class GetImage extends UserApiRequest<com.example.ibrahim.myapplication.backend.userApi.model.User> {

    private static final String REST_PATH = "get_image";

    /**
     * Create a request for the method "getImage".
     *
     * This request holds the parameters needed by the the userApi server.  After setting any optional
     * parameters, call the {@link GetImage#execute()} method to invoke the remote operation. <p>
     * {@link
     * GetImage#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param username
     * @since 1.13
     */
    protected GetImage(java.lang.String username) {
      super(UserApi.this, "GET", REST_PATH, null, com.example.ibrahim.myapplication.backend.userApi.model.User.class);
      this.username = com.google.api.client.util.Preconditions.checkNotNull(username, "Required parameter username must be specified.");
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public GetImage setAlt(java.lang.String alt) {
      return (GetImage) super.setAlt(alt);
    }

    @Override
    public GetImage setFields(java.lang.String fields) {
      return (GetImage) super.setFields(fields);
    }

    @Override
    public GetImage setKey(java.lang.String key) {
      return (GetImage) super.setKey(key);
    }

    @Override
    public GetImage setOauthToken(java.lang.String oauthToken) {
      return (GetImage) super.setOauthToken(oauthToken);
    }

    @Override
    public GetImage setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (GetImage) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public GetImage setQuotaUser(java.lang.String quotaUser) {
      return (GetImage) super.setQuotaUser(quotaUser);
    }

    @Override
    public GetImage setUserIp(java.lang.String userIp) {
      return (GetImage) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String username;

    /**

     */
    public java.lang.String getUsername() {
      return username;
    }

    public GetImage setUsername(java.lang.String username) {
      this.username = username;
      return this;
    }

    @Override
    public GetImage set(String parameterName, Object value) {
      return (GetImage) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "getMatches".
   *
   * This request holds the parameters needed by the userApi server.  After setting any optional
   * parameters, call the {@link GetMatches#execute()} method to invoke the remote operation.
   *
   * @param username
   * @return the request
   */
  public GetMatches getMatches(java.lang.String username) throws java.io.IOException {
    GetMatches result = new GetMatches(username);
    initialize(result);
    return result;
  }

  public class GetMatches extends UserApiRequest<com.example.ibrahim.myapplication.backend.userApi.model.UserCollection> {

    private static final String REST_PATH = "get_matches";

    /**
     * Create a request for the method "getMatches".
     *
     * This request holds the parameters needed by the the userApi server.  After setting any optional
     * parameters, call the {@link GetMatches#execute()} method to invoke the remote operation. <p>
     * {@link
     * GetMatches#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param username
     * @since 1.13
     */
    protected GetMatches(java.lang.String username) {
      super(UserApi.this, "GET", REST_PATH, null, com.example.ibrahim.myapplication.backend.userApi.model.UserCollection.class);
      this.username = com.google.api.client.util.Preconditions.checkNotNull(username, "Required parameter username must be specified.");
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public GetMatches setAlt(java.lang.String alt) {
      return (GetMatches) super.setAlt(alt);
    }

    @Override
    public GetMatches setFields(java.lang.String fields) {
      return (GetMatches) super.setFields(fields);
    }

    @Override
    public GetMatches setKey(java.lang.String key) {
      return (GetMatches) super.setKey(key);
    }

    @Override
    public GetMatches setOauthToken(java.lang.String oauthToken) {
      return (GetMatches) super.setOauthToken(oauthToken);
    }

    @Override
    public GetMatches setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (GetMatches) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public GetMatches setQuotaUser(java.lang.String quotaUser) {
      return (GetMatches) super.setQuotaUser(quotaUser);
    }

    @Override
    public GetMatches setUserIp(java.lang.String userIp) {
      return (GetMatches) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String username;

    /**

     */
    public java.lang.String getUsername() {
      return username;
    }

    public GetMatches setUsername(java.lang.String username) {
      this.username = username;
      return this;
    }

    @Override
    public GetMatches set(String parameterName, Object value) {
      return (GetMatches) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "getProfilePic".
   *
   * This request holds the parameters needed by the userApi server.  After setting any optional
   * parameters, call the {@link GetProfilePic#execute()} method to invoke the remote operation.
   *
   * @param username
   * @return the request
   */
  public GetProfilePic getProfilePic(java.lang.String username) throws java.io.IOException {
    GetProfilePic result = new GetProfilePic(username);
    initialize(result);
    return result;
  }

  public class GetProfilePic extends UserApiRequest<com.example.ibrahim.myapplication.backend.userApi.model.User> {

    private static final String REST_PATH = "get_profile_pic";

    /**
     * Create a request for the method "getProfilePic".
     *
     * This request holds the parameters needed by the the userApi server.  After setting any optional
     * parameters, call the {@link GetProfilePic#execute()} method to invoke the remote operation. <p>
     * {@link GetProfilePic#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientR
     * equest)} must be called to initialize this instance immediately after invoking the constructor.
     * </p>
     *
     * @param username
     * @since 1.13
     */
    protected GetProfilePic(java.lang.String username) {
      super(UserApi.this, "GET", REST_PATH, null, com.example.ibrahim.myapplication.backend.userApi.model.User.class);
      this.username = com.google.api.client.util.Preconditions.checkNotNull(username, "Required parameter username must be specified.");
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public GetProfilePic setAlt(java.lang.String alt) {
      return (GetProfilePic) super.setAlt(alt);
    }

    @Override
    public GetProfilePic setFields(java.lang.String fields) {
      return (GetProfilePic) super.setFields(fields);
    }

    @Override
    public GetProfilePic setKey(java.lang.String key) {
      return (GetProfilePic) super.setKey(key);
    }

    @Override
    public GetProfilePic setOauthToken(java.lang.String oauthToken) {
      return (GetProfilePic) super.setOauthToken(oauthToken);
    }

    @Override
    public GetProfilePic setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (GetProfilePic) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public GetProfilePic setQuotaUser(java.lang.String quotaUser) {
      return (GetProfilePic) super.setQuotaUser(quotaUser);
    }

    @Override
    public GetProfilePic setUserIp(java.lang.String userIp) {
      return (GetProfilePic) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String username;

    /**

     */
    public java.lang.String getUsername() {
      return username;
    }

    public GetProfilePic setUsername(java.lang.String username) {
      this.username = username;
      return this;
    }

    @Override
    public GetProfilePic set(String parameterName, Object value) {
      return (GetProfilePic) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "getUser".
   *
   * This request holds the parameters needed by the userApi server.  After setting any optional
   * parameters, call the {@link GetUser#execute()} method to invoke the remote operation.
   *
   * @param id
   * @return the request
   */
  public GetUser getUser(java.lang.Long id) throws java.io.IOException {
    GetUser result = new GetUser(id);
    initialize(result);
    return result;
  }

  public class GetUser extends UserApiRequest<com.example.ibrahim.myapplication.backend.userApi.model.User> {

    private static final String REST_PATH = "get_user";

    /**
     * Create a request for the method "getUser".
     *
     * This request holds the parameters needed by the the userApi server.  After setting any optional
     * parameters, call the {@link GetUser#execute()} method to invoke the remote operation. <p>
     * {@link
     * GetUser#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
     * be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param id
     * @since 1.13
     */
    protected GetUser(java.lang.Long id) {
      super(UserApi.this, "GET", REST_PATH, null, com.example.ibrahim.myapplication.backend.userApi.model.User.class);
      this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public GetUser setAlt(java.lang.String alt) {
      return (GetUser) super.setAlt(alt);
    }

    @Override
    public GetUser setFields(java.lang.String fields) {
      return (GetUser) super.setFields(fields);
    }

    @Override
    public GetUser setKey(java.lang.String key) {
      return (GetUser) super.setKey(key);
    }

    @Override
    public GetUser setOauthToken(java.lang.String oauthToken) {
      return (GetUser) super.setOauthToken(oauthToken);
    }

    @Override
    public GetUser setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (GetUser) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public GetUser setQuotaUser(java.lang.String quotaUser) {
      return (GetUser) super.setQuotaUser(quotaUser);
    }

    @Override
    public GetUser setUserIp(java.lang.String userIp) {
      return (GetUser) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Long id;

    /**

     */
    public java.lang.Long getId() {
      return id;
    }

    public GetUser setId(java.lang.Long id) {
      this.id = id;
      return this;
    }

    @Override
    public GetUser set(String parameterName, Object value) {
      return (GetUser) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "getUserByUsername".
   *
   * This request holds the parameters needed by the userApi server.  After setting any optional
   * parameters, call the {@link GetUserByUsername#execute()} method to invoke the remote operation.
   *
   * @param username
   * @return the request
   */
  public GetUserByUsername getUserByUsername(java.lang.String username) throws java.io.IOException {
    GetUserByUsername result = new GetUserByUsername(username);
    initialize(result);
    return result;
  }

  public class GetUserByUsername extends UserApiRequest<com.example.ibrahim.myapplication.backend.userApi.model.User> {

    private static final String REST_PATH = "getUserByUsername";

    /**
     * Create a request for the method "getUserByUsername".
     *
     * This request holds the parameters needed by the the userApi server.  After setting any optional
     * parameters, call the {@link GetUserByUsername#execute()} method to invoke the remote operation.
     * <p> {@link GetUserByUsername#initialize(com.google.api.client.googleapis.services.AbstractGoogl
     * eClientRequest)} must be called to initialize this instance immediately after invoking the
     * constructor. </p>
     *
     * @param username
     * @since 1.13
     */
    protected GetUserByUsername(java.lang.String username) {
      super(UserApi.this, "GET", REST_PATH, null, com.example.ibrahim.myapplication.backend.userApi.model.User.class);
      this.username = com.google.api.client.util.Preconditions.checkNotNull(username, "Required parameter username must be specified.");
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public GetUserByUsername setAlt(java.lang.String alt) {
      return (GetUserByUsername) super.setAlt(alt);
    }

    @Override
    public GetUserByUsername setFields(java.lang.String fields) {
      return (GetUserByUsername) super.setFields(fields);
    }

    @Override
    public GetUserByUsername setKey(java.lang.String key) {
      return (GetUserByUsername) super.setKey(key);
    }

    @Override
    public GetUserByUsername setOauthToken(java.lang.String oauthToken) {
      return (GetUserByUsername) super.setOauthToken(oauthToken);
    }

    @Override
    public GetUserByUsername setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (GetUserByUsername) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public GetUserByUsername setQuotaUser(java.lang.String quotaUser) {
      return (GetUserByUsername) super.setQuotaUser(quotaUser);
    }

    @Override
    public GetUserByUsername setUserIp(java.lang.String userIp) {
      return (GetUserByUsername) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String username;

    /**

     */
    public java.lang.String getUsername() {
      return username;
    }

    public GetUserByUsername setUsername(java.lang.String username) {
      this.username = username;
      return this;
    }

    @Override
    public GetUserByUsername set(String parameterName, Object value) {
      return (GetUserByUsername) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "getUsersByLocation".
   *
   * This request holds the parameters needed by the userApi server.  After setting any optional
   * parameters, call the {@link GetUsersByLocation#execute()} method to invoke the remote operation.
   *
   * @param location
   * @return the request
   */
  public GetUsersByLocation getUsersByLocation(java.lang.String location) throws java.io.IOException {
    GetUsersByLocation result = new GetUsersByLocation(location);
    initialize(result);
    return result;
  }

  public class GetUsersByLocation extends UserApiRequest<com.example.ibrahim.myapplication.backend.userApi.model.UserCollection> {

    private static final String REST_PATH = "get_users_by_location";

    /**
     * Create a request for the method "getUsersByLocation".
     *
     * This request holds the parameters needed by the the userApi server.  After setting any optional
     * parameters, call the {@link GetUsersByLocation#execute()} method to invoke the remote
     * operation. <p> {@link GetUsersByLocation#initialize(com.google.api.client.googleapis.services.A
     * bstractGoogleClientRequest)} must be called to initialize this instance immediately after
     * invoking the constructor. </p>
     *
     * @param location
     * @since 1.13
     */
    protected GetUsersByLocation(java.lang.String location) {
      super(UserApi.this, "GET", REST_PATH, null, com.example.ibrahim.myapplication.backend.userApi.model.UserCollection.class);
      this.location = com.google.api.client.util.Preconditions.checkNotNull(location, "Required parameter location must be specified.");
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public GetUsersByLocation setAlt(java.lang.String alt) {
      return (GetUsersByLocation) super.setAlt(alt);
    }

    @Override
    public GetUsersByLocation setFields(java.lang.String fields) {
      return (GetUsersByLocation) super.setFields(fields);
    }

    @Override
    public GetUsersByLocation setKey(java.lang.String key) {
      return (GetUsersByLocation) super.setKey(key);
    }

    @Override
    public GetUsersByLocation setOauthToken(java.lang.String oauthToken) {
      return (GetUsersByLocation) super.setOauthToken(oauthToken);
    }

    @Override
    public GetUsersByLocation setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (GetUsersByLocation) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public GetUsersByLocation setQuotaUser(java.lang.String quotaUser) {
      return (GetUsersByLocation) super.setQuotaUser(quotaUser);
    }

    @Override
    public GetUsersByLocation setUserIp(java.lang.String userIp) {
      return (GetUsersByLocation) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key("Location")
    private java.lang.String location;

    /**

     */
    public java.lang.String getLocation() {
      return location;
    }

    public GetUsersByLocation setLocation(java.lang.String location) {
      this.location = location;
      return this;
    }

    @Override
    public GetUsersByLocation set(String parameterName, Object value) {
      return (GetUsersByLocation) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "getUsersILiked".
   *
   * This request holds the parameters needed by the userApi server.  After setting any optional
   * parameters, call the {@link GetUsersILiked#execute()} method to invoke the remote operation.
   *
   * @param username
   * @return the request
   */
  public GetUsersILiked getUsersILiked(java.lang.String username) throws java.io.IOException {
    GetUsersILiked result = new GetUsersILiked(username);
    initialize(result);
    return result;
  }

  public class GetUsersILiked extends UserApiRequest<com.example.ibrahim.myapplication.backend.userApi.model.UserCollection> {

    private static final String REST_PATH = "get_user_i_liked";

    /**
     * Create a request for the method "getUsersILiked".
     *
     * This request holds the parameters needed by the the userApi server.  After setting any optional
     * parameters, call the {@link GetUsersILiked#execute()} method to invoke the remote operation.
     * <p> {@link GetUsersILiked#initialize(com.google.api.client.googleapis.services.AbstractGoogleCl
     * ientRequest)} must be called to initialize this instance immediately after invoking the
     * constructor. </p>
     *
     * @param username
     * @since 1.13
     */
    protected GetUsersILiked(java.lang.String username) {
      super(UserApi.this, "GET", REST_PATH, null, com.example.ibrahim.myapplication.backend.userApi.model.UserCollection.class);
      this.username = com.google.api.client.util.Preconditions.checkNotNull(username, "Required parameter username must be specified.");
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public GetUsersILiked setAlt(java.lang.String alt) {
      return (GetUsersILiked) super.setAlt(alt);
    }

    @Override
    public GetUsersILiked setFields(java.lang.String fields) {
      return (GetUsersILiked) super.setFields(fields);
    }

    @Override
    public GetUsersILiked setKey(java.lang.String key) {
      return (GetUsersILiked) super.setKey(key);
    }

    @Override
    public GetUsersILiked setOauthToken(java.lang.String oauthToken) {
      return (GetUsersILiked) super.setOauthToken(oauthToken);
    }

    @Override
    public GetUsersILiked setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (GetUsersILiked) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public GetUsersILiked setQuotaUser(java.lang.String quotaUser) {
      return (GetUsersILiked) super.setQuotaUser(quotaUser);
    }

    @Override
    public GetUsersILiked setUserIp(java.lang.String userIp) {
      return (GetUsersILiked) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String username;

    /**

     */
    public java.lang.String getUsername() {
      return username;
    }

    public GetUsersILiked setUsername(java.lang.String username) {
      this.username = username;
      return this;
    }

    @Override
    public GetUsersILiked set(String parameterName, Object value) {
      return (GetUsersILiked) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "getUsersLikedMe".
   *
   * This request holds the parameters needed by the userApi server.  After setting any optional
   * parameters, call the {@link GetUsersLikedMe#execute()} method to invoke the remote operation.
   *
   * @param username
   * @return the request
   */
  public GetUsersLikedMe getUsersLikedMe(java.lang.String username) throws java.io.IOException {
    GetUsersLikedMe result = new GetUsersLikedMe(username);
    initialize(result);
    return result;
  }

  public class GetUsersLikedMe extends UserApiRequest<com.example.ibrahim.myapplication.backend.userApi.model.UserCollection> {

    private static final String REST_PATH = "get_user_liked_me";

    /**
     * Create a request for the method "getUsersLikedMe".
     *
     * This request holds the parameters needed by the the userApi server.  After setting any optional
     * parameters, call the {@link GetUsersLikedMe#execute()} method to invoke the remote operation.
     * <p> {@link GetUsersLikedMe#initialize(com.google.api.client.googleapis.services.AbstractGoogleC
     * lientRequest)} must be called to initialize this instance immediately after invoking the
     * constructor. </p>
     *
     * @param username
     * @since 1.13
     */
    protected GetUsersLikedMe(java.lang.String username) {
      super(UserApi.this, "GET", REST_PATH, null, com.example.ibrahim.myapplication.backend.userApi.model.UserCollection.class);
      this.username = com.google.api.client.util.Preconditions.checkNotNull(username, "Required parameter username must be specified.");
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public GetUsersLikedMe setAlt(java.lang.String alt) {
      return (GetUsersLikedMe) super.setAlt(alt);
    }

    @Override
    public GetUsersLikedMe setFields(java.lang.String fields) {
      return (GetUsersLikedMe) super.setFields(fields);
    }

    @Override
    public GetUsersLikedMe setKey(java.lang.String key) {
      return (GetUsersLikedMe) super.setKey(key);
    }

    @Override
    public GetUsersLikedMe setOauthToken(java.lang.String oauthToken) {
      return (GetUsersLikedMe) super.setOauthToken(oauthToken);
    }

    @Override
    public GetUsersLikedMe setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (GetUsersLikedMe) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public GetUsersLikedMe setQuotaUser(java.lang.String quotaUser) {
      return (GetUsersLikedMe) super.setQuotaUser(quotaUser);
    }

    @Override
    public GetUsersLikedMe setUserIp(java.lang.String userIp) {
      return (GetUsersLikedMe) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String username;

    /**

     */
    public java.lang.String getUsername() {
      return username;
    }

    public GetUsersLikedMe setUsername(java.lang.String username) {
      this.username = username;
      return this;
    }

    @Override
    public GetUsersLikedMe set(String parameterName, Object value) {
      return (GetUsersLikedMe) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "insertImage".
   *
   * This request holds the parameters needed by the userApi server.  After setting any optional
   * parameters, call the {@link InsertImage#execute()} method to invoke the remote operation.
   *
   * @param img2
   * @param img3
   * @param profilepic
   * @param username
   * @return the request
   */
  public InsertImage insertImage(java.lang.String img2, java.lang.String img3, java.lang.String profilepic, java.lang.String username) throws java.io.IOException {
    InsertImage result = new InsertImage(img2, img3, profilepic, username);
    initialize(result);
    return result;
  }

  public class InsertImage extends UserApiRequest<Void> {

    private static final String REST_PATH = "insert_image";

    /**
     * Create a request for the method "insertImage".
     *
     * This request holds the parameters needed by the the userApi server.  After setting any optional
     * parameters, call the {@link InsertImage#execute()} method to invoke the remote operation. <p>
     * {@link
     * InsertImage#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param img2
     * @param img3
     * @param profilepic
     * @param username
     * @since 1.13
     */
    protected InsertImage(java.lang.String img2, java.lang.String img3, java.lang.String profilepic, java.lang.String username) {
      super(UserApi.this, "POST", REST_PATH, null, Void.class);
      this.img2 = com.google.api.client.util.Preconditions.checkNotNull(img2, "Required parameter img2 must be specified.");
      this.img3 = com.google.api.client.util.Preconditions.checkNotNull(img3, "Required parameter img3 must be specified.");
      this.profilepic = com.google.api.client.util.Preconditions.checkNotNull(profilepic, "Required parameter profilepic must be specified.");
      this.username = com.google.api.client.util.Preconditions.checkNotNull(username, "Required parameter username must be specified.");
    }

    @Override
    public InsertImage setAlt(java.lang.String alt) {
      return (InsertImage) super.setAlt(alt);
    }

    @Override
    public InsertImage setFields(java.lang.String fields) {
      return (InsertImage) super.setFields(fields);
    }

    @Override
    public InsertImage setKey(java.lang.String key) {
      return (InsertImage) super.setKey(key);
    }

    @Override
    public InsertImage setOauthToken(java.lang.String oauthToken) {
      return (InsertImage) super.setOauthToken(oauthToken);
    }

    @Override
    public InsertImage setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (InsertImage) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public InsertImage setQuotaUser(java.lang.String quotaUser) {
      return (InsertImage) super.setQuotaUser(quotaUser);
    }

    @Override
    public InsertImage setUserIp(java.lang.String userIp) {
      return (InsertImage) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String img2;

    /**

     */
    public java.lang.String getImg2() {
      return img2;
    }

    public InsertImage setImg2(java.lang.String img2) {
      this.img2 = img2;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String img3;

    /**

     */
    public java.lang.String getImg3() {
      return img3;
    }

    public InsertImage setImg3(java.lang.String img3) {
      this.img3 = img3;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String profilepic;

    /**

     */
    public java.lang.String getProfilepic() {
      return profilepic;
    }

    public InsertImage setProfilepic(java.lang.String profilepic) {
      this.profilepic = profilepic;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String username;

    /**

     */
    public java.lang.String getUsername() {
      return username;
    }

    public InsertImage setUsername(java.lang.String username) {
      this.username = username;
      return this;
    }

    @Override
    public InsertImage set(String parameterName, Object value) {
      return (InsertImage) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "insertUser".
   *
   * This request holds the parameters needed by the userApi server.  After setting any optional
   * parameters, call the {@link InsertUser#execute()} method to invoke the remote operation.
   *
   * @param content the {@link com.example.ibrahim.myapplication.backend.userApi.model.User}
   * @return the request
   */
  public InsertUser insertUser(com.example.ibrahim.myapplication.backend.userApi.model.User content) throws java.io.IOException {
    InsertUser result = new InsertUser(content);
    initialize(result);
    return result;
  }

  public class InsertUser extends UserApiRequest<com.example.ibrahim.myapplication.backend.userApi.model.User> {

    private static final String REST_PATH = "inser_user";

    /**
     * Create a request for the method "insertUser".
     *
     * This request holds the parameters needed by the the userApi server.  After setting any optional
     * parameters, call the {@link InsertUser#execute()} method to invoke the remote operation. <p>
     * {@link
     * InsertUser#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param content the {@link com.example.ibrahim.myapplication.backend.userApi.model.User}
     * @since 1.13
     */
    protected InsertUser(com.example.ibrahim.myapplication.backend.userApi.model.User content) {
      super(UserApi.this, "POST", REST_PATH, content, com.example.ibrahim.myapplication.backend.userApi.model.User.class);
    }

    @Override
    public InsertUser setAlt(java.lang.String alt) {
      return (InsertUser) super.setAlt(alt);
    }

    @Override
    public InsertUser setFields(java.lang.String fields) {
      return (InsertUser) super.setFields(fields);
    }

    @Override
    public InsertUser setKey(java.lang.String key) {
      return (InsertUser) super.setKey(key);
    }

    @Override
    public InsertUser setOauthToken(java.lang.String oauthToken) {
      return (InsertUser) super.setOauthToken(oauthToken);
    }

    @Override
    public InsertUser setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (InsertUser) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public InsertUser setQuotaUser(java.lang.String quotaUser) {
      return (InsertUser) super.setQuotaUser(quotaUser);
    }

    @Override
    public InsertUser setUserIp(java.lang.String userIp) {
      return (InsertUser) super.setUserIp(userIp);
    }

    @Override
    public InsertUser set(String parameterName, Object value) {
      return (InsertUser) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "insertUserLiked".
   *
   * This request holds the parameters needed by the userApi server.  After setting any optional
   * parameters, call the {@link InsertUserLiked#execute()} method to invoke the remote operation.
   *
   * @param likedUser
   * @param username
   * @return the request
   */
  public InsertUserLiked insertUserLiked(java.lang.String likedUser, java.lang.String username) throws java.io.IOException {
    InsertUserLiked result = new InsertUserLiked(likedUser, username);
    initialize(result);
    return result;
  }

  public class InsertUserLiked extends UserApiRequest<Void> {

    private static final String REST_PATH = "insert_user_liked";

    /**
     * Create a request for the method "insertUserLiked".
     *
     * This request holds the parameters needed by the the userApi server.  After setting any optional
     * parameters, call the {@link InsertUserLiked#execute()} method to invoke the remote operation.
     * <p> {@link InsertUserLiked#initialize(com.google.api.client.googleapis.services.AbstractGoogleC
     * lientRequest)} must be called to initialize this instance immediately after invoking the
     * constructor. </p>
     *
     * @param likedUser
     * @param username
     * @since 1.13
     */
    protected InsertUserLiked(java.lang.String likedUser, java.lang.String username) {
      super(UserApi.this, "POST", REST_PATH, null, Void.class);
      this.likedUser = com.google.api.client.util.Preconditions.checkNotNull(likedUser, "Required parameter likedUser must be specified.");
      this.username = com.google.api.client.util.Preconditions.checkNotNull(username, "Required parameter username must be specified.");
    }

    @Override
    public InsertUserLiked setAlt(java.lang.String alt) {
      return (InsertUserLiked) super.setAlt(alt);
    }

    @Override
    public InsertUserLiked setFields(java.lang.String fields) {
      return (InsertUserLiked) super.setFields(fields);
    }

    @Override
    public InsertUserLiked setKey(java.lang.String key) {
      return (InsertUserLiked) super.setKey(key);
    }

    @Override
    public InsertUserLiked setOauthToken(java.lang.String oauthToken) {
      return (InsertUserLiked) super.setOauthToken(oauthToken);
    }

    @Override
    public InsertUserLiked setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (InsertUserLiked) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public InsertUserLiked setQuotaUser(java.lang.String quotaUser) {
      return (InsertUserLiked) super.setQuotaUser(quotaUser);
    }

    @Override
    public InsertUserLiked setUserIp(java.lang.String userIp) {
      return (InsertUserLiked) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String likedUser;

    /**

     */
    public java.lang.String getLikedUser() {
      return likedUser;
    }

    public InsertUserLiked setLikedUser(java.lang.String likedUser) {
      this.likedUser = likedUser;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String username;

    /**

     */
    public java.lang.String getUsername() {
      return username;
    }

    public InsertUserLiked setUsername(java.lang.String username) {
      this.username = username;
      return this;
    }

    @Override
    public InsertUserLiked set(String parameterName, Object value) {
      return (InsertUserLiked) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "insertUserLocation".
   *
   * This request holds the parameters needed by the userApi server.  After setting any optional
   * parameters, call the {@link InsertUserLocation#execute()} method to invoke the remote operation.
   *
   * @param location
   * @param content the {@link com.example.ibrahim.myapplication.backend.userApi.model.User}
   * @return the request
   */
  public InsertUserLocation insertUserLocation(java.lang.String location, com.example.ibrahim.myapplication.backend.userApi.model.User content) throws java.io.IOException {
    InsertUserLocation result = new InsertUserLocation(location, content);
    initialize(result);
    return result;
  }

  public class InsertUserLocation extends UserApiRequest<Void> {

    private static final String REST_PATH = "insert_user_location";

    /**
     * Create a request for the method "insertUserLocation".
     *
     * This request holds the parameters needed by the the userApi server.  After setting any optional
     * parameters, call the {@link InsertUserLocation#execute()} method to invoke the remote
     * operation. <p> {@link InsertUserLocation#initialize(com.google.api.client.googleapis.services.A
     * bstractGoogleClientRequest)} must be called to initialize this instance immediately after
     * invoking the constructor. </p>
     *
     * @param location
     * @param content the {@link com.example.ibrahim.myapplication.backend.userApi.model.User}
     * @since 1.13
     */
    protected InsertUserLocation(java.lang.String location, com.example.ibrahim.myapplication.backend.userApi.model.User content) {
      super(UserApi.this, "POST", REST_PATH, content, Void.class);
      this.location = com.google.api.client.util.Preconditions.checkNotNull(location, "Required parameter location must be specified.");
    }

    @Override
    public InsertUserLocation setAlt(java.lang.String alt) {
      return (InsertUserLocation) super.setAlt(alt);
    }

    @Override
    public InsertUserLocation setFields(java.lang.String fields) {
      return (InsertUserLocation) super.setFields(fields);
    }

    @Override
    public InsertUserLocation setKey(java.lang.String key) {
      return (InsertUserLocation) super.setKey(key);
    }

    @Override
    public InsertUserLocation setOauthToken(java.lang.String oauthToken) {
      return (InsertUserLocation) super.setOauthToken(oauthToken);
    }

    @Override
    public InsertUserLocation setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (InsertUserLocation) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public InsertUserLocation setQuotaUser(java.lang.String quotaUser) {
      return (InsertUserLocation) super.setQuotaUser(quotaUser);
    }

    @Override
    public InsertUserLocation setUserIp(java.lang.String userIp) {
      return (InsertUserLocation) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key("Location")
    private java.lang.String location;

    /**

     */
    public java.lang.String getLocation() {
      return location;
    }

    public InsertUserLocation setLocation(java.lang.String location) {
      this.location = location;
      return this;
    }

    @Override
    public InsertUserLocation set(String parameterName, Object value) {
      return (InsertUserLocation) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "updateUser".
   *
   * This request holds the parameters needed by the userApi server.  After setting any optional
   * parameters, call the {@link UpdateUser#execute()} method to invoke the remote operation.
   *
   * @param content the {@link com.example.ibrahim.myapplication.backend.userApi.model.User}
   * @return the request
   */
  public UpdateUser updateUser(com.example.ibrahim.myapplication.backend.userApi.model.User content) throws java.io.IOException {
    UpdateUser result = new UpdateUser(content);
    initialize(result);
    return result;
  }

  public class UpdateUser extends UserApiRequest<com.example.ibrahim.myapplication.backend.userApi.model.User> {

    private static final String REST_PATH = "user";

    /**
     * Create a request for the method "updateUser".
     *
     * This request holds the parameters needed by the the userApi server.  After setting any optional
     * parameters, call the {@link UpdateUser#execute()} method to invoke the remote operation. <p>
     * {@link
     * UpdateUser#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param content the {@link com.example.ibrahim.myapplication.backend.userApi.model.User}
     * @since 1.13
     */
    protected UpdateUser(com.example.ibrahim.myapplication.backend.userApi.model.User content) {
      super(UserApi.this, "PUT", REST_PATH, content, com.example.ibrahim.myapplication.backend.userApi.model.User.class);
    }

    @Override
    public UpdateUser setAlt(java.lang.String alt) {
      return (UpdateUser) super.setAlt(alt);
    }

    @Override
    public UpdateUser setFields(java.lang.String fields) {
      return (UpdateUser) super.setFields(fields);
    }

    @Override
    public UpdateUser setKey(java.lang.String key) {
      return (UpdateUser) super.setKey(key);
    }

    @Override
    public UpdateUser setOauthToken(java.lang.String oauthToken) {
      return (UpdateUser) super.setOauthToken(oauthToken);
    }

    @Override
    public UpdateUser setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (UpdateUser) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public UpdateUser setQuotaUser(java.lang.String quotaUser) {
      return (UpdateUser) super.setQuotaUser(quotaUser);
    }

    @Override
    public UpdateUser setUserIp(java.lang.String userIp) {
      return (UpdateUser) super.setUserIp(userIp);
    }

    @Override
    public UpdateUser set(String parameterName, Object value) {
      return (UpdateUser) super.set(parameterName, value);
    }
  }

  /**
   * Builder for {@link UserApi}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          DEFAULT_ROOT_URL,
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
    }

    /** Builds a new instance of {@link UserApi}. */
    @Override
    public UserApi build() {
      return new UserApi(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link UserApiRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setUserApiRequestInitializer(
        UserApiRequestInitializer userapiRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(userapiRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
